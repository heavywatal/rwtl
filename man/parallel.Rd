% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.R
\name{mcmap}
\alias{mcmap}
\alias{mcmap_lgl}
\alias{mcmap_int}
\alias{mcmap_dbl}
\alias{mcmap_chr}
\alias{mcmap_dfr}
\title{Parallel execution in the purrr::map style}
\usage{
mcmap(.x, .f, ..., .mc.cores = getOption("mc.cores", 2L))

mcmap_lgl(.x, .f, ..., .mc.cores = getOption("mc.cores", 2L))

mcmap_int(.x, .f, ..., .mc.cores = getOption("mc.cores", 2L))

mcmap_dbl(.x, .f, ..., .mc.cores = getOption("mc.cores", 2L))

mcmap_chr(.x, .f, ..., .mc.cores = getOption("mc.cores", 2L))

mcmap_dfr(.x, .f, ..., .id = NULL, .mc.cores = getOption("mc.cores",
  2L))
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Additional arguments passed on to the mapped function.}

\item{.mc.cores}{integer}

\item{.id}{Either a string or \code{NULL}. If a string, the output will contain
a variable with that name, storing either the name (if \code{.x} is named) or
the index (if \code{.x} is unnamed) of the input. If \code{NULL}, the default, no
variable will be created.

Only applies to \code{_dfr} variant.}
}
\description{
Parallel execution in the purrr::map style
}
\details{
\code{mcmap} is a variant of \code{parallel::mclapply} that accepts a formula as \code{.f}.
}
